// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GABAK.Automation.UI.Acceptance.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestScenarios")]
    public partial class TestScenariosFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TestScenarios.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TestScenarios", "In order to get an interview with UMG\r\nAs a job seeking person\r\nI need to write a" +
                    "ll these scenarios", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User signs up")]
        [NUnit.Framework.CategoryAttribute("UI")]
        public virtual void UserSignsUp()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User signs up", new string[] {
                        "UI"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("a user is on the offline homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "username",
                        "email",
                        "password"});
            table1.AddRow(new string[] {
                        "jorandom",
                        "jb@randomemail.com",
                        "p@ssword1"});
#line 9
 testRunner.When("the user signs up", ((string)(null)), table1, "When ");
#line 12
 testRunner.Then("the user is automatically logged in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 13
 testRunner.And("the user\'s name is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User signs in")]
        [NUnit.Framework.CategoryAttribute("UI")]
        public virtual void UserSignsIn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User signs in", new string[] {
                        "UI"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("a user is on the offline homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "email",
                        "password"});
            table2.AddRow(new string[] {
                        "giggus01@email.com",
                        "password"});
#line 17
 testRunner.When("the user signs in", ((string)(null)), table2, "When ");
#line 20
 testRunner.Then("the user is logged in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
 testRunner.And("the user\'s name is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify items displayed on homepage for offline user")]
        [NUnit.Framework.CategoryAttribute("UI")]
        public virtual void VerifyItemsDisplayedOnHomepageForOfflineUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify items displayed on homepage for offline user", new string[] {
                        "UI"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("a user is on the offline homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
 testRunner.Then("the global feeds and popular tags are displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User likes article but not signed in")]
        [NUnit.Framework.CategoryAttribute("UI")]
        public virtual void UserLikesArticleButNotSignedIn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User likes article but not signed in", new string[] {
                        "UI"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("a user is on the offline homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
 testRunner.When("a user tries to like an article", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("the user is directed to the sign up area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify validation errors for invalid details")]
        [NUnit.Framework.CategoryAttribute("UI")]
        [NUnit.Framework.TestCaseAttribute("joe_bloggs", "joe@randommail.com", "p@ssword", null)]
        [NUnit.Framework.TestCaseAttribute("jblrandom", "giggus01@email.com", "password", null)]
        [NUnit.Framework.TestCaseAttribute("jblrandom", "joe@randommail.com", "p", null)]
        public virtual void VerifyValidationErrorsForInvalidDetails(string username, string email_Address, string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UI"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify validation errors for invalid details", @__tags);
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("a user is on the offline homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
 testRunner.When("the user clicks on the sign up link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.And(string.Format("the user enters \"{0}\" as username on sign up page", username), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.And(string.Format("the user enters \"{0}\" as email on sign up page", email_Address), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.And(string.Format("the user enters \"{0}\" as password on sign up page", password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("the user clicks on the sign up button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.Then("a validation error is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User signs up and your feed is displayed")]
        [NUnit.Framework.CategoryAttribute("UI")]
        [NUnit.Framework.CategoryAttribute("Fail")]
        public virtual void UserSignsUpAndYourFeedIsDisplayed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User signs up and your feed is displayed", new string[] {
                        "UI",
                        "Fail"});
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("a user is on the offline homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "username",
                        "email",
                        "password"});
            table3.AddRow(new string[] {
                        "jorandom",
                        "jb@randomemail.com",
                        "p@ssword1"});
#line 48
 testRunner.When("the user signs up", ((string)(null)), table3, "When ");
#line 51
 testRunner.Then("the Your Feeds section should be displayed by default", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 52
 testRunner.And("the Your Feeds section should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Signed in user creates new article")]
        [NUnit.Framework.CategoryAttribute("UI")]
        public virtual void SignedInUserCreatesNewArticle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Signed in user creates new article", new string[] {
                        "UI"});
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
 testRunner.Given("a user is on the logged in homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "About",
                        "Description",
                        "Tags"});
            table4.AddRow(new string[] {
                        "TestArticle11",
                        "QA Article",
                        "Just another description",
                        "qa"});
#line 56
 testRunner.When("the user creates a new article", ((string)(null)), table4, "When ");
#line 59
 testRunner.Then("the article section is displayed with the article information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 60
 testRunner.And("the comment section is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
